input {
  kafka {
    group_id => "logstash1"
    client_id => "logstash1"
    bootstrap_servers => ["kafka-broker:29092"]
    topics => ["log-messages"]
    auto_offset_reset => "earliest"
    codec => avro_schema_registry {
      endpoint => "http://schema-registry:8081"
    }
    value_deserializer_class => "org.apache.kafka.common.serialization.ByteArrayDeserializer"
    decorate_events => true
  }
}

filter {
  mutate {
	add_field => {
      "timestamp" => "%{[Timestamp]}"
	  "[@metadata][offset]" => "%{[@metadata][kafka][offset]}"
	  "logLevel" => "%{[LogLevel]}"
	}
  }
  mutate {
  	convert => { "timestamp" => "integer" }
    convert => { "[@metadata][offset]" => "integer" }
  }
  date {
    match => ["timestamp", "UNIX_MS"]
    add_field => { "[@metadata][date]" => "%{+YYYY-MM-dd}" }
  }
  mutate {
    remove_field => ["@timestamp"]
  }
  
  if [EventId][Id] {
     mutate {
       add_field => { "eventId" => "%{[EventId][Id]}" }
     }
	 mutate {
  	   convert => { "eventId" => "integer" }
	 }
  }
  if [EventId][Name] {
     mutate {
        add_field => { "eventName" => "%{[EventId][Name]}" }
     }
  }
  
  if [Exception][StackTrace] {
     mutate {
        add_field => { "stackTrace" => "%{[Exception][StackTrace]}" }
     }
  }
  if [Exception][Source] {
     mutate {
        add_field => { "source" => "%{[Exception][Source]}" }
     }
  }
  if [Exception][Message] {
     mutate {
        add_field => { "exceptionMessage" => "%{[Exception][Message]}" }
     }
  }
  if [Exception][HResult] {
     mutate {
       add_field => { "hResult" => "%{[Exception][HResult]}" }
     }
	 mutate {
  	   convert => { "hResult" => "integer" }
	 }
  }
  if [Exception][HelpLink] {
     mutate {
        add_field => { "helpLink" => "%{[Exception][HelpLink]}" }
     }
  }

  if [Message] {
     mutate {
        add_field => { "message" => "%{[Message]}" }
     }
  }
  
  prune {
    interpolate => true
    whitelist_names => ["logLevel", "eventId", "eventName", "stackTrace", "source", "exceptionMessage", "hResult", "helpLink", "message", "timestamp"]
  }
}

output {
  elasticsearch { 
    hosts => ["elasticsearch:9200"]
    index => "log-%{[@metadata][date]}"
    document_id => "%{[@metadata][offset]}"
    user => logstash_writer
    password => "${LOGSTASH_WRITER_PASSWORD}"
    ssl_certificate_verification => false
  }
}